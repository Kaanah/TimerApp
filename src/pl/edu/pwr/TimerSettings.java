package pl.edu.pwr;

import javax.swing.*;
import javax.swing.plaf.ProgressBarUI;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import static javax.swing.WindowConstants.EXIT_ON_CLOSE;

public class TimerSettings {
    public static final int SEC2MS = 1000;
    private JSpinner spinnerGreen;
    private JSpinner spinnerYellow;
    private JSpinner spinnerRed;
    private JButton startButton;
    private JButton resetButton;
    private JPanel panelSettings;
    private int timeLeft;
    private int timeElapsed;

    public TimerSettings() {
        $$$setupUI$$$();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();

        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                final int timeGreen = (Integer) spinnerGreen.getValue();
                final int timeYellow = (Integer) spinnerYellow.getValue();
                final int timeRed = (Integer) spinnerRed.getValue();
                timeLeft = timeGreen + timeYellow + timeRed * SEC2MS;
                timeElapsed = 0;
                JPanel panelColours = new JPanel();
                panelColours.setBackground(Color.GREEN);
                panelColours.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
                JLabel label1 = new JLabel(Integer.toString(timeElapsed));
                label1.setFont(new Font(label1.getName(), Font.PLAIN, 50));
                label1.setForeground(Color.BLACK);
                panelColours.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
                JDialog colourDisplay = new JDialog();
                colourDisplay.setContentPane(panelColours);
                colourDisplay.pack();
                colourDisplay.setVisible(true);
                colourDisplay.setBounds(GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds());
                ActionListener countdownGreen = new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        timeElapsed += 1;
                        label1.setText(Integer.toString(timeElapsed));
                        if (timeElapsed < timeGreen) {
                            panelColours.setBackground(Color.GREEN);
                        }
                        if (timeElapsed >= timeGreen) {
                            panelColours.setBackground(Color.YELLOW);
                        }
                        if (timeElapsed >= timeYellow) {
                            panelColours.setBackground(Color.RED);
                        }
                        if (timeElapsed >= timeRed) {
                            panelColours.setBackground(Color.BLACK);
                            ((Timer) e.getSource()).stop();
                        }
                        label1.setText(Integer.toString(timeElapsed));
                    }
                };
                Timer timer = new Timer(SEC2MS, countdownGreen);
                timer.start();


            }
        });
        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                spinnerGreen.setValue(0);
                spinnerYellow.setValue(0);
                spinnerRed.setValue(0);
                timeElapsed = 0;
            }
        });
    }

    public static void main(String[] args) {
        JFrame frameSettings = new JFrame("TimerSettings");
        frameSettings.setContentPane(new TimerSettings().panelSettings);
        frameSettings.setDefaultCloseOperation(EXIT_ON_CLOSE);
        frameSettings.pack();
        frameSettings.setVisible(true);
    }

    private void createUIComponents() {
        SpinnerNumberModel spinnerModelGreen = new SpinnerNumberModel(40, 0, 1000, 1);
        SpinnerNumberModel spinnerModelYellow = new SpinnerNumberModel(55, 0, 1000, 1);
        SpinnerNumberModel spinnerModelRed = new SpinnerNumberModel(100, 0, 1000, 1);
        spinnerGreen = new JSpinner(spinnerModelGreen);
        spinnerYellow = new JSpinner(spinnerModelYellow);
        spinnerRed = new JSpinner(spinnerModelRed);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panelSettings = new JPanel();
        panelSettings.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        panelSettings.add(spinnerGreen, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(171, 26), null, 0, false));
        panelSettings.add(spinnerYellow, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(171, 26), null, 0, false));
        panelSettings.add(spinnerRed, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(171, 26), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panelSettings.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Green");
        panelSettings.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Yellow");
        panelSettings.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Red");
        panelSettings.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        panelSettings.add(startButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(171, 32), null, 0, false));
        resetButton = new JButton();
        resetButton.setText("Reset");
        panelSettings.add(resetButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        label1.setLabelFor(spinnerGreen);
        label2.setLabelFor(spinnerYellow);
        label3.setLabelFor(spinnerRed);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelSettings;
    }
}
